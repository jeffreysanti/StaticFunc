
*** StaticFunc Parser Rules***
*** Jeffrey Santi***

Productions [Expressions]


NumericLit -> {floatLit} | {intLit}

NumericVal -> NumericLit | {Ident}

;; NumericExpr: -> NumericExprAux | NumericExprAux {+} NumericExpr
NumericExpr: -> NumericExprAux NumericExpr_
NumericExpr_: -> {+} NumericExpr | #


;NumericExprAux -> NumericVal | NumericVal {*} NumericExprAux | {(} NumericExpr {)}
NumericExprAux: -> NumericVal NumericExprAux_ | {(} NumericExpr {)}
NumericExprAux_: -> {*} NumericExprAux | #





New Grammar Notation:
Curtosy of Neal R. Wagner's Explanation: http://www.cs.utsa.edu/~wagner/CS3723/rdparse/rdparser.html
		
		# Indicates End Of Production
		| Indicates Factories of Production
		{ xxx } 0-n instances of xxx
		[x y z] either x y or z



//////VarValue	:	"IDENT" { ( ParamExpr ) } { "[" Expr "]" } { ( ParamExpr ) } { "." VarVal }

VarValue	:	. "IDENT" VarValue
			|	[Expr] VarValue
			| 	( ParamExpr ) VarValue
			|	#


Val			:	NumLit
			|	"STRINGLIT"
			|	"IDENT" VarValue

NumLit		:	"FLOATLIT"
			|	"INTLIT"




Expr		:	ExprA #

ExprA		:	ExprB { | ExprB }
ExprB		:	ExprC { ~ ExprC }
ExprC		:	ExprD { & ExprD }
ExprD		:	ExprE { [== !=] ExprE }
ExprE		:	ExprF { [< <= > >=] ExprF }
ExprF		:	ExprG { [shl shr] ExprG }
ExprG		:	ExprH { [+ -] ExprH }
ExprH		:	ExprI { [* / mod] ExprI }
ExprI		:	ExprJ ^ ExprI
			|	ExprJ
ExprJ		:	! ExprK
			|	ExprK
ExprK		:	( ExprA )
			|	[ ArrayExpr ]
			|	Val


ArrayExpr		:	Expr ArrayExprAux
				|	#
ArrayExprAux	:	for "IDENT" in Expr {where Expr}
				|	{ , Expr }

ParamExpr		:	Expr { , Expr }
				|	#


Stmt			:	"{" StmtBlock "}"
				|	Decl
				|	Assign
				|	Cond
				|	While
				|	For
				|	;

Decl			:	DeclType "IDENT" { ( expr ) } ;
Assign			:	"IDENT" VarValue = expr ;

DeclType		:	DeclMod "IDENT" DeclAux
DeclAux			:	< { DeclType {: "IDENT" } , } >
				|	#

StmtBlock		:	Stmt { Stmt }
				|	#


Cond			:	if ( expr ) Stmt { else Stmt }
While			:	while ( expr ) Stmt
For				:	for ( "IDENT" in Expr ) Stmt




		




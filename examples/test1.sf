#typelistadd I int8, int16;
#typelistadd I int32, int64;
#typelistadd P2 string, int32;

// recursive version
def I fibr(I n)
{
	if(n == 1 | n == 2)
		return 1;
	return fibr(n - 1) + fibr(n - 2);
}

// tail-recursive version
def I fibt(I n)
{
	def I aux(I n_cur, I last, I lastlast)
	{
		if(n_cur == n)
			return last + lastlast;
		return aux(n_cur + 1, last + lastlast, last);
	}
	
	aux = lambda(I(I a, I b, I c){
						println("change of plans");
						return fibi(n);
					});
	
	if(n == 1 | n == 2)
		return 1;
	return aux(3, 1, 1);
}

function<function<int32, int32>,int32> mylambda(lambda(function<int32, int32>(int32 a){
	return lambda(int32(int32 x){
		return a+x+7;
	});
}));

function<int32, int32> tmp(mylambda(5));
tmp(2);

mylambda(5)(2);

// iterative (mutable)
def I fibi(I n)
{
	if(n == 1 | n == 2)
		return 1;

	I last(1);
	I lastlast(1);
	for(I x in range(3, n))
	{
		I tmp(last);
		last = last + lastlast;
		last = tmp;
	}
	return last;
}

def vector<I> fibbs(I n)
{
	println("TestSingle");
	return [fibt(x) for I x in range(1, n)];
}

def int32 sum(function<int32, int32> func, int32 n)
{
	if(n == 1)
		return func(n);
	else
		return func(n) + sum(func, n - 1);
}


def int32 main(vector<string> args)
{
	fibi(8);
	fibt(8);
	fibr(8);
	
	int32 oct(043);
	int32 hex(0x2E);
	int32 hexneg(-0x2E);
	int32 octneg(-021);
	
	// floats
	float32 fl(12.13);
	float32 fl2(.16);
	float32 fln(-54.2);
	float32 fln2(-.6);
	
	println(string(sum(lambda(	int32(int32 n){
							return n*3;
						}),
					10)));
	
	for(int32 x in fibbs(20))
	{
		println(string(x));
		println("Test");
	}
	//println(string(first([1,2,3,4])));
	
	
	dict<string, string> mydict(["a":"the", "b":"cat", "c":"in"]);
	dict<int8, int8> mydict2([ci:2*ci for int8 ci in [0,1,2,3,4,5] where ci % 2 == 0]);
	
	dict<int8, string> testmap([s:string(s) for int8 s in range(0, 100)]);
	
	tuple<string:a, int16:b> mytuple2(["the", 5]);
	
	int32 c(3);
	
	c = mytuple2.b; // okay
	//mytuple2.b = c; // problem
	
	vector<string> myarray(["the", "cat", "in"]);
	vector<int8> myarray2([2*ci for int8 ci in range(0,3)]);
	
	string tmp(mytuple2.a);
	
	println(mydict["b"]);
	println(string(mydict2[1+1]));
	println(mytuple2.a);
	println(myarray[0]);
	
	
	return 0;
}

main(["hi", "world"]);


